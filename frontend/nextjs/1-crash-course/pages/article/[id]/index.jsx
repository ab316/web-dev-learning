import { useRouter } from "next/router";
import Link from "next/link";

const Article = ({ article }) => {
  // const router = useRouter();
  // const { id } = router.query;
  return (
    <>
      <h1>{article.title}</h1>
      <p>{article.body}</p>
      <br />
      <Link href="/">Go Back</Link>
    </>
  );
};

// export const getServerSideProps = async (context) => {
//   const res = await fetch(
//     `https://jsonplaceholder.typicode.com/posts/${context.params.id}`
//   );
//   const article = await res.json();
//   return {
//     props: {
//       article,
//     },
//   };
// };

// For static site generation, this will produce the props for the component above.
// The will be called at build time for each path generated by getStaticPaths. The result will be stored as JSON
// as part of the static website
export const getStaticProps = async (context) => {
  const res = await fetch(
    `https://jsonplaceholder.typicode.com/posts/${context.params.id}`
  );
  const article = await res.json();
  return {
    props: {
      article,
    },
  };
};

// For static site generation, NextJs will call this method to produce a list of all paths
export const getStaticPaths = async () => {
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);
  const articles = await res.json();
  const ids = articles.map((a) => a.id);
  const paths = ids.map((id) => ({
    params: {
      id: id.toString(),
    },
  }));

  return {
    paths: paths,
    // Go to 404 page if a path does not exist
    fallback: false,
  };
};

export default Article;
